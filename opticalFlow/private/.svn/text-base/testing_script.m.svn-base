% Script for optical flow toolbox
%
%/---Script Authors---------------------\
%|                                      | 
%|   *** J.Lefèvre, PhD                 |  
%|   julien.lefevre@chups.jussieu.fr    |
%|                                      | 
%\--------------------------------------/

load('rabbit.mat') % Mesh of a cute bunny

%----------------------------------------------------%
% Three Gaussian patches of activity (heat equation) %
%----------------------------------------------------%

n=size(FV.vertices,1);
X_0=zeros(n,1);
X_0(19)=1;
X_0(441)=1;
X_0(1224)=1;
X=heat_equation(X_0,FV.faces,FV.vertices,1,500);
activity=X(:,1);
view_surface('Bunny',FV.faces,FV.vertices,activity) % visualization

%-----------------------------------------------%
% Static Vector field (vectorial heat equation) %
%-----------------------------------------------%

V_1=zeros(n*2,1);
V_1(19)=1;
V_1(1431+n)=1/sqrt(2); % eye
V_1(1431)=1/sqrt(2);
V_1(441)=0; % leg
V_1(441+n)=1; 
V_1(1224)=1; % neck

heatV1=vector_heat_equation(V_1,FV.faces,FV.vertices,1,100);
norV1=sqrt(sum(heatV1.^2,2));
indices1=find(norV1);
heatV1(indices1,:)=heatV1(indices1,:)./repmat(norV1(indices1),1,3); %normalization

view_surface('Bunny',FV.faces,FV.vertices,activity) % visualization
hold on
quiver3(FV.vertices(:,1),FV.vertices(:,2),FV.vertices(:,3),heatV1(:,1),heatV1(:,2),heatV1(:,3),'g')
quiver3(FV.vertices([441 1224 19],1),FV.vertices([441 1224 19],2),FV.vertices([441 1224 19],3),...
    heatV1([441 1224 19],1),heatV1([441 1224 19],2),heatV1([441 1224 19],3),'r') % in red, the vectors used for the diffusion process
close all

%------------------------------------%
% Advection through the Vector Field %
%------------------------------------%

nt=100;
flowc.V=heatV1;
flowc.faces=FV.faces;
flowc.vertices=FV.vertices;
[I_pred,M,R,A1,A2,A3]=calcul_advection2(activity,flowc,nt,1,4);


%visualization

[hf,hs,hl]=view_surface('Bunny',FV.faces,FV.vertices,activity)
hold on
quiver3(FV.vertices(:,1),FV.vertices(:,2),FV.vertices(:,3),heatV1(:,1),heatV1(:,2),heatV1(:,3),'g')
h=text(30,50,'Step 1')
for ii=1:50
    set(hs,'FaceVertexCData',I_pred(:,ii))
    if mod(ii,5)==0
        set(h,'String',['Step ', num2str(ii)])
    end
    pause(0.1)
end
close all

%--------------------------%
% Optical flow computation %
%--------------------------%

PARAM.VERBOSE=1;
PARAM.hornschunk=0.01;
PARAM.Time=[1:nt];
PARAM.FV.faces=FV.faces;
PARAM.FV.vertices=FV.vertices;
PARAM.F=I_pred;
PARAM.GRAPHE=0;
Jflowc=J_analysis_cortex([],PARAM);

% visualization
[hf,hs,hl]=view_surface('Bunny',FV.faces,FV.vertices,activity)
hold on
for ii=1:50
    view_surface('Bunny',FV.faces,FV.vertices,I_pred(:,ii))
    hq=quiver3(FV.vertices(:,1),FV.vertices(:,2),FV.vertices(:,3),Jflowc.V(:,1,ii),Jflowc.V(:,2,ii),Jflowc.V(:,3,ii),'g')
    pause(0.1)
    delete(hq)
end
close all

%------------------------------------%
% Optical flow computation on brains %
%------------------------------------%

load('catch-alp-good-f_results_trial_1_MNE_MEG_1737_MNI.mat')
load('MNI_braincereb_small_tess_CTF.mat')
load('ImageGridTime.mat')

FV.faces=Faces{1};
FV.vertices=Vertices{1}';

[NFV,remove_vertices]=tessellation_redundancies(FV,1,1e-15);
PARAM.FV.faces=NFV.faces;
PARAM.FV.vertices=NFV.vertices;
good_vertices=setdiff([1:length(FV.vertices)],remove_vertices);

PARAM.F=double(ImageGridAmp(good_vertices,:));

PARAM.VERBOSE=1;
PARAM.hornschunk=0.01;
PARAM.Time=ImageGridTime(625:750);
PARAM.GRAPHE=0;

clear ImageGridAmp tess2mri_interp

Jflowc=J_analysis_cortex([],PARAM);

%-----------------------------%
%    Global segmentation      %
%-----------------------------%


%---------------------------------------------------------%
%    Reproducibility and contrast between conditions      %
%---------------------------------------------------------%

load('23-08-2007-13H15.mat')
Time=FlowScalp{1}.t;

%%%%%% A) Simple temporal segmentation with local minima %%%%%%

stable=cell(7,2);
for ii=1:7
    for cond=1:2
        DEscalp(ii,:)=sqrt(FlowScalp{ii,cond}.de);
        [indmin]=peakdetsheraz(DEscalp(ii,:).*10000);
%         [vmin,indmin]=lmin(DEscalp(ii,:),3);
        stable{ii,cond}=indmin;%indmin(find(Time(indmin)>0));
    end
end

%%%%%% B) Method exposed on Fig 6.12 of the Phd manuscript %%%%%%

cond=1; % experimental conditions : 1='Catch', 2='NoCatch'

% 1) Number of samples in the matrix

temps_stable1=Time([stable{:,cond}]);
sort_temps_stable1=sort(temps_stable1);
%max(diff(sort_temps_stable1)) % number of samples 
nsamp=floor((Time(end)-Time(1))/max(diff(sort_temps_stable1)))+1; %50;
XX=linspace(Time(1),Time(end),nsamp);

% 2) Correlations
[ZZ,Z,cardinal,correlation]=inter_subjects_correlations(FlowScalp,XX,Time,stable,7,nsamp,cond);

% 3) Vizualisation

inter_subjects_vizualisation(ZZ,XX,nsamp,Z,cardinal)
